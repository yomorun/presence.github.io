{"/components/grouphug":{"title":"Group Hug","data":{"":"","online-demo#Online Demo":"Live collaborator avatars for multiplayer web appsOnline Demo","getting-started#Getting Started":"Install with npm:\n\nCreate a Presence instance\n\nAdd <GroupHug /> to pages:","self-hosting#Self-hosting":"see prscd","license#License":"The MIT License"}},"/getting-started":{"title":"Getting Started","data":{"":"","installation#Installation":"Inside your React project directory, run the following:","quick-start#Quick Start":"Create a Presence instance:\n\n\nlo.yomo.dev always points to 127.0.0.1, so you can use it for local development.\nCheck here for more examples.\nThen you can create a Channel instance:\n\nThe Channel instance has a subscribePeers method to subscribe peers changes:\n\nLet's try broadcast the document.hidden state of a user to all other peers in this channel:\n\nAlso, we can subscribe to the hidden-state changes from other peers in this channel:"}},"/hosting":{"title":"Index","data":{"":""}},"/hosting/single-node":{"title":"Single Node","data":{"":""}},"/":{"title":"Introduction","data":{"":"Presencejs is a JavaScript library that enables the creation of real-time web applications with a secure, low-latency, and high-performance geo-distributed architecture.Key Features:\nGeo-distributed Architecture: Deploy your real-time backend close to users all over the world for better performance.\nWebTransport Support: WebTransport is an new API that offers low-latency, bidirectional, client-server messaging.\nSecure, low-latency, and high-performance: PresenceJS prioritizes security, speed, and performance for a seamless user experience.\nReal-time and collaborative experience: With PresenceJS, components receive data flow in real time, ensuring fast and reactive UI by offering the flexibility to send either unreliable or reliable data\nEasy to use: PresenceJS is simple to implement, making it an accessible solution for developers.\nFree for self-managed hosting: PresenceJS is free to use for self-managed hosting, making it an affordable choice for projects of any size."}},"/interface/channel":{"title":"Channel API","data":{"":"","subscribepeers#subscribePeers":"The Channel instance has a subscribePeers method to subscribe peers changes:","parameters#Parameters":"callback: A callback function that will be called when peers changes.\npeers: An array of peers.","broadcast#broadcast":"Let's try broadcast the document.hidden state of a user to all other peers in this channel:","parameters-1#Parameters":"event-name: The event name.\npayload: The payload to be sent.","subscribe#subscribe":"Also, we can subscribe to the hidden-state changes from other peers in this channel:","parameters-2#Parameters":"event-name: The event name.\ncallback: A callback function that will be called when the event is received.\npayload: The payload sent by the peer.\npeerState: The peer state."}},"/interface/presence":{"title":"Presence API","data":{"":"","constructor#Constructor":"Create a Presence instance:\n\n\nlo.yomo.dev always points to 127.0.0.1, so you can use it for local development.\nCheck here for more examples.","joinchannel#joinChannel":"Create a Channel instance:"}},"/prscd/dev-server":{"title":"Local Development","data":{"":"","start-prscd-service#Start prscd service":"Start YoMo Zipper service in terminal-1:\n\nStart prscd service in terminal-2:","test-on-browser#Test on browser":"Open webtransport.html by Chrome with Dev Tools\nOpen websocket.html by Chrome with Dev Tools"}},"/prscd/introduction":{"title":"Prscd","data":{"":"The open source backend for Presencejs v2.0","features#Features":"WebTransport support\nWebsocket arraybuffer mode support\nZero-copy upgrade to WebSocket\nSO_REUSEPORT on Darwin and Linux\nNative Ping/Pong frame implemented in WebSocket\nSupport WebTransport Datagrams, unreliable and fast communication\nGeo-distributed Clusters by YoMo","working-in-process#Working-in-Process":"Reuse goroutine\nWebTransport Stream support, reliable\npprof"}}}